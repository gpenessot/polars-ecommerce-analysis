---
title: "Analyse E-commerce avec Polars"
author: "Gaël Penessot"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    code-fold: false
    theme: cosmo
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
execute:
  echo: true
  warning: true
  error: true
filters:
   - quarto
---

```{python}
#| label: setup
#| include: true

print("Démarrage du chargement des données...")

import polars as pl
import plotly.express as px
import plotly.graph_objects as go
import json
import os
from pathlib import Path

# Affichage du répertoire de travail et des variables d'environnement
print(f"Répertoire de travail : {os.getcwd()}")
print(f"Variables d'environnement :")
print(f"RESULTS_DIR = {os.getenv('RESULTS_DIR')}")

# Définition du chemin des résultats
results_dir = "/home/gael/Documents/Github/polars-ecommerce-analysis/data/processed/report_20250119_001932/results"
print(f"Utilisation du répertoire de résultats : {results_dir}")

# Fonction de chargement avec vérification
def load_results(filename):
    filepath = os.path.join(results_dir, filename)
    print(f"Tentative de chargement de {filepath}")
    
    if not os.path.exists(filepath):
        print(f"ERREUR: Fichier non trouvé: {filepath}")
        return None
        
    try:
        if filepath.endswith('.json'):
            with open(filepath, 'r') as f:
                return json.load(f)
        return pl.read_csv(filepath)
    except Exception as e:
        print(f"ERREUR lors du chargement de {filepath}: {str(e)}")
        return None

# Chargement des données avec vérification
print("\nChargement des fichiers de résultats...")

global_kpis = load_results('global_kpis.json')
print(f"KPIs globaux : {global_kpis}")

customer_metrics = load_results('customer_metrics.csv')
print(f"Métriques clients chargées : {customer_metrics is not None}")

price_analysis = load_results('price_analysis.csv')
print(f"Analyse des prix chargée : {price_analysis is not None}")

top_products = load_results('top_products.csv')
print(f"Top produits chargés : {top_products is not None}")

temporal_analysis = {
    k: load_results(f'temporal_{k}.csv') 
    for k in ['daily', 'weekday', 'hourly']
}
print(f"Analyses temporelles chargées : {temporal_analysis}")

```

# Résumé Exécutif

Cette analyse présente une vue d'ensemble de notre activité e-commerce basée sur les données disponibles.

```{python}
if global_kpis:
    print(f"""Points clés:
    - Chiffre d'affaires total : €{global_kpis['total_revenue']:,.2f}
    - Nombre total de commandes : {global_kpis['total_orders']:,d}
    - Panier moyen : €{global_kpis['average_order_value']:,.2f}
    """)
else:
    print("Données non disponibles")
```

[Le reste du template reste identique...]